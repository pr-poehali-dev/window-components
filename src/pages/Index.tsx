import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import Icon from "@/components/ui/icon";
import { useToast } from "@/hooks/use-toast";

interface Product {
  id: number;
  name: string;
  category: string;
  price: number;
  unit: string;
  image: string;
}

interface CartItem extends Product {
  quantity: number;
}

const products: Product[] = [
  { id: 1, name: "–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å EPDM", category: "seals", price: 450, unit: "–º", image: "üî≤" },
  { id: 2, name: "–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å —Å–∏–ª–∏–∫–æ–Ω–æ–≤—ã–π", category: "seals", price: 580, unit: "–º", image: "üî≤" },
  { id: 3, name: "–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å TPE", category: "seals", price: 520, unit: "–º", image: "üî≤" },
  { id: 4, name: "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫ –±–µ–ª—ã–π 200–º–º", category: "sills", price: 890, unit: "–º", image: "‚ûñ" },
  { id: 5, name: "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫ –±–µ–ª—ã–π 300–º–º", category: "sills", price: 1200, unit: "–º", image: "‚ûñ" },
  { id: 6, name: "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫ –ø–æ–¥ –¥–µ—Ä–µ–≤–æ 250–º–º", category: "sills", price: 1450, unit: "–º", image: "‚ûñ" },
  { id: 7, name: "–ü–∞–Ω–µ–ª—å –ü–í–• –±–µ–ª–∞—è", category: "panels", price: 320, unit: "–º¬≤", image: "‚¨ú" },
  { id: 8, name: "–ü–∞–Ω–µ–ª—å –ü–í–• —Ü–≤–µ—Ç–Ω–∞—è", category: "panels", price: 480, unit: "–º¬≤", image: "‚¨ú" },
  { id: 9, name: "–ü–∞–Ω–µ–ª—å –ü–í–• —Å —Ä–∏—Å—É–Ω–∫–æ–º", category: "panels", price: 650, unit: "–º¬≤", image: "‚¨ú" },
];

export default function Index() {
  const [cart, setCart] = useState<CartItem[]>([]);
  const [activeTab, setActiveTab] = useState("catalog");
  const [calcQuantity, setCalcQuantity] = useState<number>(1);
  const [calcProduct, setCalcProduct] = useState<number>(1);
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [searchQuery, setSearchQuery] = useState<string>("");
  const { toast } = useToast();

  const addToCart = (product: Product) => {
    const existing = cart.find(item => item.id === product.id);
    if (existing) {
      setCart(cart.map(item => 
        item.id === product.id 
          ? { ...item, quantity: item.quantity + 1 }
          : item
      ));
    } else {
      setCart([...cart, { ...product, quantity: 1 }]);
    }
    toast({
      title: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É",
      description: product.name,
    });
  };

  const removeFromCart = (id: number) => {
    setCart(cart.filter(item => item.id !== id));
  };

  const updateQuantity = (id: number, quantity: number) => {
    if (quantity < 1) return;
    setCart(cart.map(item => 
      item.id === id ? { ...item, quantity } : item
    ));
  };

  const getTotalPrice = () => {
    return cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
  };

  const getCalcPrice = () => {
    const product = products.find(p => p.id === calcProduct);
    return product ? product.price * calcQuantity : 0;
  };

  const categoryNames: Record<string, string> = {
    all: "–í—Å–µ —Ç–æ–≤–∞—Ä—ã",
    seals: "–£–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª–∏",
    sills: "–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–∏",
    panels: "–ü–∞–Ω–µ–ª–∏ –ü–í–•",
  };

  const getFilteredProducts = () => {
    let filtered = products;
    
    if (selectedCategory !== "all") {
      filtered = filtered.filter(p => p.category === selectedCategory);
    }
    
    if (searchQuery) {
      filtered = filtered.filter(p => 
        p.name.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }
    
    return filtered;
  };

  return (
    <div className="min-h-screen bg-secondary">
      <header className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold text-foreground">–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –æ–∫–æ–Ω</h1>
              <p className="text-muted-foreground mt-1">–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã</p>
            </div>
            <Badge variant="destructive" className="text-lg px-4 py-2">
              <Icon name="ShoppingCart" size={20} className="mr-2" />
              {cart.length}
            </Badge>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 py-8">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-4 mb-8">
            <TabsTrigger value="catalog" className="text-base">
              <Icon name="Grid3x3" size={20} className="mr-2" />
              –ö–∞—Ç–∞–ª–æ–≥
            </TabsTrigger>
            <TabsTrigger value="calculator" className="text-base">
              <Icon name="Calculator" size={20} className="mr-2" />
              –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
            </TabsTrigger>
            <TabsTrigger value="cart" className="text-base">
              <Icon name="ShoppingCart" size={20} className="mr-2" />
              –ö–æ—Ä–∑–∏–Ω–∞
            </TabsTrigger>
            <TabsTrigger value="contacts" className="text-base">
              <Icon name="Phone" size={20} className="mr-2" />
              –ö–æ–Ω—Ç–∞–∫—Ç—ã
            </TabsTrigger>
          </TabsList>

          <TabsContent value="catalog" className="space-y-6">
            <div className="flex flex-col md:flex-row gap-4 mb-6">
              <div className="flex-1">
                <Label htmlFor="search" className="mb-2 block">–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤</Label>
                <div className="relative">
                  <Icon name="Search" size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground" />
                  <Input
                    id="search"
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="pl-10"
                  />
                </div>
              </div>
              <div className="md:w-64">
                <Label htmlFor="category-filter" className="mb-2 block">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
                <select
                  id="category-filter"
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className="w-full px-3 py-2 border rounded-md bg-white"
                >
                  {Object.entries(categoryNames).map(([value, label]) => (
                    <option key={value} value={value}>{label}</option>
                  ))}
                </select>
              </div>
            </div>

            <div className="flex items-center justify-between mb-4">
              <p className="text-muted-foreground">
                –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <span className="font-semibold text-foreground">{getFilteredProducts().length}</span>
              </p>
              {(searchQuery || selectedCategory !== "all") && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => {
                    setSearchQuery("");
                    setSelectedCategory("all");
                  }}
                >
                  <Icon name="X" size={16} className="mr-2" />
                  –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                </Button>
              )}
            </div>

            {getFilteredProducts().length === 0 ? (
              <div className="text-center py-12">
                <Icon name="SearchX" size={64} className="mx-auto text-muted-foreground mb-4" />
                <p className="text-xl text-muted-foreground">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                <p className="text-muted-foreground mt-2">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {getFilteredProducts().map(product => (
                  <Card key={product.id} className="hover:shadow-lg transition-shadow">
                    <CardHeader>
                      <div className="text-6xl text-center mb-4">{product.image}</div>
                      <CardTitle className="text-lg">{product.name}</CardTitle>
                      <Badge variant="secondary" className="w-fit">
                        {categoryNames[product.category]}
                      </Badge>
                    </CardHeader>
                    <CardContent>
                      <div className="flex justify-between items-center mb-4">
                        <span className="text-2xl font-bold text-primary">
                          {product.price} ‚ÇΩ
                        </span>
                        <span className="text-muted-foreground">–∑–∞ {product.unit}</span>
                      </div>
                      <Button 
                        onClick={() => addToCart(product)}
                        className="w-full"
                      >
                        –í –∫–æ—Ä–∑–∏–Ω—É
                      </Button>
                    </CardContent>
                  </Card>
                ))}
              </div>
            )}
          </TabsContent>

          <TabsContent value="calculator">
            <Card className="max-w-2xl mx-auto">
              <CardHeader>
                <CardTitle className="text-2xl">–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="space-y-2">
                  <Label htmlFor="product">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä</Label>
                  <select
                    id="product"
                    value={calcProduct}
                    onChange={(e) => setCalcProduct(Number(e.target.value))}
                    className="w-full px-3 py-2 border rounded-md"
                  >
                    {products.map(product => (
                      <option key={product.id} value={product.id}>
                        {product.name} - {product.price} ‚ÇΩ/{product.unit}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</Label>
                  <Input
                    id="quantity"
                    type="number"
                    min="0.1"
                    step="0.1"
                    value={calcQuantity}
                    onChange={(e) => setCalcQuantity(Number(e.target.value))}
                  />
                </div>

                <div className="bg-primary/10 p-6 rounded-lg">
                  <div className="flex justify-between items-center">
                    <span className="text-xl font-semibold">–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                    <span className="text-3xl font-bold text-primary">
                      {getCalcPrice().toFixed(2)} ‚ÇΩ
                    </span>
                  </div>
                </div>

                <Button 
                  onClick={() => {
                    const product = products.find(p => p.id === calcProduct);
                    if (product) {
                      const existing = cart.find(item => item.id === product.id);
                      if (existing) {
                        setCart(cart.map(item => 
                          item.id === product.id 
                            ? { ...item, quantity: item.quantity + calcQuantity }
                            : item
                        ));
                      } else {
                        setCart([...cart, { ...product, quantity: calcQuantity }]);
                      }
                      toast({
                        title: "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É",
                        description: `${product.name} - ${calcQuantity} ${product.unit}`,
                      });
                      setActiveTab("cart");
                    }
                  }}
                  className="w-full"
                  size="lg"
                >
                  –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                </Button>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="cart">
            <Card className="max-w-4xl mx-auto">
              <CardHeader>
                <CardTitle className="text-2xl">–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫</CardTitle>
              </CardHeader>
              <CardContent>
                {cart.length === 0 ? (
                  <div className="text-center py-12">
                    <Icon name="ShoppingCart" size={64} className="mx-auto text-muted-foreground mb-4" />
                    <p className="text-xl text-muted-foreground">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {cart.map(item => (
                      <div key={item.id} className="flex items-center justify-between border-b pb-4">
                        <div className="flex items-center gap-4">
                          <span className="text-4xl">{item.image}</span>
                          <div>
                            <h3 className="font-semibold">{item.name}</h3>
                            <p className="text-sm text-muted-foreground">
                              {item.price} ‚ÇΩ –∑–∞ {item.unit}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center gap-4">
                          <div className="flex items-center gap-2">
                            <Button
                              variant="outline"
                              size="icon"
                              onClick={() => updateQuantity(item.id, item.quantity - 0.5)}
                            >
                              <Icon name="Minus" size={16} />
                            </Button>
                            <Input
                              type="number"
                              value={item.quantity}
                              onChange={(e) => updateQuantity(item.id, Number(e.target.value))}
                              className="w-20 text-center"
                              step="0.1"
                              min="0.1"
                            />
                            <Button
                              variant="outline"
                              size="icon"
                              onClick={() => updateQuantity(item.id, item.quantity + 0.5)}
                            >
                              <Icon name="Plus" size={16} />
                            </Button>
                          </div>
                          <span className="font-bold text-lg min-w-[120px] text-right">
                            {(item.price * item.quantity).toFixed(2)} ‚ÇΩ
                          </span>
                          <Button
                            variant="destructive"
                            size="icon"
                            onClick={() => removeFromCart(item.id)}
                          >
                            <Icon name="Trash2" size={16} />
                          </Button>
                        </div>
                      </div>
                    ))}
                    <div className="bg-primary/10 p-6 rounded-lg mt-6">
                      <div className="flex justify-between items-center">
                        <span className="text-2xl font-semibold">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                        <span className="text-4xl font-bold text-primary">
                          {getTotalPrice().toFixed(2)} ‚ÇΩ
                        </span>
                      </div>
                    </div>
                    <Button className="w-full mt-4" size="lg">
                      –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="contacts">
            <Card className="max-w-2xl mx-auto">
              <CardHeader>
                <CardTitle className="text-2xl">–ö–æ–Ω—Ç–∞–∫—Ç—ã</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="flex items-start gap-4">
                  <Icon name="Phone" size={24} className="text-primary mt-1" />
                  <div>
                    <h3 className="font-semibold mb-1">–¢–µ–ª–µ—Ñ–æ–Ω</h3>
                    <p className="text-lg">+7 (XXX) XXX-XX-XX</p>
                  </div>
                </div>
                <div className="flex items-start gap-4">
                  <Icon name="Mail" size={24} className="text-primary mt-1" />
                  <div>
                    <h3 className="font-semibold mb-1">Email</h3>
                    <p className="text-lg">info@windows-parts.ru</p>
                  </div>
                </div>
                <div className="flex items-start gap-4">
                  <Icon name="MapPin" size={24} className="text-primary mt-1" />
                  <div>
                    <h3 className="font-semibold mb-1">–ê–¥—Ä–µ—Å</h3>
                    <p className="text-lg">–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1</p>
                  </div>
                </div>
                <div className="flex items-start gap-4">
                  <Icon name="Clock" size={24} className="text-primary mt-1" />
                  <div>
                    <h3 className="font-semibold mb-1">–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã</h3>
                    <p className="text-lg">–ü–Ω-–ü—Ç: 9:00 - 18:00</p>
                    <p className="text-lg">–°–±-–í—Å: –í—ã—Ö–æ–¥–Ω–æ–π</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}